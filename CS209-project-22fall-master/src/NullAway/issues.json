[
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/681",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/681/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/681/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/681/events",
    "html_url": "https://github.com/uber/NullAway/issues/681",
    "id": 1416764129,
    "node_id": "I_kwDOBhZ_Pc5Uchrh",
    "number": 681,
    "title": "Respect annotated AtomicReference's",
    "user": {
      "login": "lycarter",
      "id": 10535774,
      "node_id": "MDQ6VXNlcjEwNTM1Nzc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/10535774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lycarter",
      "html_url": "https://github.com/lycarter",
      "followers_url": "https://api.github.com/users/lycarter/followers",
      "following_url": "https://api.github.com/users/lycarter/following{/other_user}",
      "gists_url": "https://api.github.com/users/lycarter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lycarter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lycarter/subscriptions",
      "organizations_url": "https://api.github.com/users/lycarter/orgs",
      "repos_url": "https://api.github.com/users/lycarter/repos",
      "events_url": "https://api.github.com/users/lycarter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lycarter/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-10-20T14:46:13Z",
    "updated_at": "2022-10-20T16:25:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In this example code, I've annotated my AtomicReference to show that it can never be null. However, NullAway still has a warning `[NullAway] returning @Nullable expression from method with @NonNull return type`. I believe this stems from https://github.com/uber/NullAway/blob/master/nullaway/src/main/java/com/uber/nullaway/handlers/LibraryModelsHandler.java#L618, which (based on my quick skim of the code) looks like it pre-annotates the `AtomicReference::get` method with `@Nullable`, even when that isn't necessarily true.\r\n\r\nCould NullAway consider supporting this better, or is there a good workaround here that I might be missing?\r\n\r\n```java\r\nimport java.util.concurrent.atomic.AtomicReference;\r\nimport org.checkerframework.checker.nullness.qual.NonNull;\r\n\r\npublic final class MyClass {\r\n\r\n    private final AtomicReference<@NonNull String> ref;\r\n\r\n    MyClass() {\r\n        ref = new AtomicReference<>(\"starting value\");\r\n    }\r\n\r\n    public String getCurrentValue() {\r\n        return ref.get(); // returning @Nullable expression from method with @NonNull return type\r\n    }\r\n\r\n    public void updateValue(@NonNull String newValue) {\r\n        ref.set(newValue);\r\n    }\r\n}\r\n```\r\n\r\nUsing nullaway 0.9.9 via https://github.com/palantir/gradle-baseline (cc @carterkozak @schlosna )\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/681/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/674",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/674/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/674/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/674/events",
    "html_url": "https://github.com/uber/NullAway/issues/674",
    "id": 1404401599,
    "node_id": "I_kwDOBhZ_Pc5TtXe_",
    "number": 674,
    "title": "Not-null varargs argument with Nullable elements - considered as Nullable",
    "user": {
      "login": "krisso-rtb",
      "id": 105232495,
      "node_id": "U_kgDOBkW4bw",
      "avatar_url": "https://avatars.githubusercontent.com/u/105232495?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/krisso-rtb",
      "html_url": "https://github.com/krisso-rtb",
      "followers_url": "https://api.github.com/users/krisso-rtb/followers",
      "following_url": "https://api.github.com/users/krisso-rtb/following{/other_user}",
      "gists_url": "https://api.github.com/users/krisso-rtb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/krisso-rtb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/krisso-rtb/subscriptions",
      "organizations_url": "https://api.github.com/users/krisso-rtb/orgs",
      "repos_url": "https://api.github.com/users/krisso-rtb/repos",
      "events_url": "https://api.github.com/users/krisso-rtb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/krisso-rtb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604145,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDU=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true,
        "description": null
      },
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-10-11T10:29:57Z",
    "updated_at": "2022-10-27T01:36:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "```\r\n@Documented\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ ElementType.TYPE_USE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER,\r\n        ElementType.LOCAL_VARIABLE })\r\npublic @interface Nullable {\r\n}\r\n--------------------------------------------------------------------------\r\n@Documented\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ ElementType.TYPE_USE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER,\r\n        ElementType.LOCAL_VARIABLE })\r\npublic @interface NonNull {\r\n}\r\n--------------------------------------------------------------------------\r\nprotected static String composeName(@Nullable String @NonNull... names) {\r\n    StringJoiner stringJoiner = new StringJoiner(\":\");\r\n    for (String name : names) {\r\n        if (name != null && !name.isEmpty()) {\r\n            stringJoiner.add(name);\r\n        }\r\n    }\r\n    return stringJoiner.toString();\r\n}\r\n```\r\n\r\nresult:\r\n```\r\nerror: [NullAway] enhanced-for expression names is @Nullable\r\n```\r\nwhich points to line:\r\n```\r\nfor (String name : names) {\r\n```\r\n\r\nKey facts:\r\n- `names` is vararg array, it's expected to be not-null and contain:\r\n- Nullable String elements\r\n- For some reason these two annotations are mixed.\r\n\r\nNice examples:\r\nhttps://help.eclipse.org/latest/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_type_annotations.htm&cp=1_3_9_1_3&anchor=compatibility\r\n\r\nThere is also one answer I found helpful:\r\nhttps://stackoverflow.com/questions/32327134/where-does-a-nullable-annotation-refer-to-in-case-of-a-varargs-parameter",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/674/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/672",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/672/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/672/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/672/events",
    "html_url": "https://github.com/uber/NullAway/issues/672",
    "id": 1397168867,
    "node_id": "I_kwDOBhZ_Pc5TRxrj",
    "number": 672,
    "title": "Treat parameter of `Object.equals()` as `@Nullable`",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-10-05T03:47:44Z",
    "updated_at": "2022-10-05T03:47:44Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This would be a bit disruptive to users due to newly-reported errors, but it's a correct modeling of the API and could expose bugs.  See https://github.com/uber/NullAway/issues/619#issuecomment-1178403833 for discussion, including recommending [EqualsMissingNullable](https://errorprone.info/bugpattern/EqualsMissingNullable) as an autofix (though it won't fix the problems if methods were dereferencing the parameter without a null check).",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/672/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/662",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/662/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/662/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/662/events",
    "html_url": "https://github.com/uber/NullAway/issues/662",
    "id": 1382702543,
    "node_id": "I_kwDOBhZ_Pc5Sal3P",
    "number": 662,
    "title": "Report errors for `@Nullable` annotations on primitive / void locations?",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-09-22T16:17:06Z",
    "updated_at": "2022-09-22T16:17:06Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Such annotations used to be completely ignored by NullAway, but with recent changes they can lead to hard-to-understand errors.  E.g.:\r\n```java\r\n@Nullable int foo() { ... }\r\nvoid baz(int i) { ... }\r\nbaz(foo());\r\n```\r\nFor this code NullAway reports a warning of trying to pass `@Nullable` to a non-null parameter, whereas the real issue is the invalid `@Nullable` annotation on `foo()`'s return type.\r\n\r\nWe could directly check for such cases in NullAway and give a warning.  Alternately, Error Prone already has checkers around this type of issue:\r\n\r\nhttps://errorprone.info/bugpattern/NullablePrimitive\r\nhttps://errorprone.info/bugpattern/NullablePrimitiveArray\r\nhttps://errorprone.info/bugpattern/NullableVoid\r\n\r\nWe could instead document that we recommend turning on those checkers in combination with NullAway.  That said, if we _really_ want to avoid giving weird error messages for these cases, we'll have to add more detection for primitive-type cases (which might slightly improve performance). ",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/662/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/660",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/660/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/660/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/660/events",
    "html_url": "https://github.com/uber/NullAway/issues/660",
    "id": 1380112357,
    "node_id": "I_kwDOBhZ_Pc5SQtfl",
    "number": 660,
    "title": "Support enough nullability on generics to allow Function<@Nullable T> and similar types",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-09-20T23:41:02Z",
    "updated_at": "2022-09-21T00:17:19Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Currently, NullAway doesn't support nullability of type parameters / generics.\r\n\r\nWe also ship with a model for `Function::apply(...)` that requires non-null argument and return values. This is by far the most case where we'd wish to have support for nullable type parameters internally, to allow for explicit `Function<@Nullable T>` implementations.\r\n\r\nEven partial / special-cased support here on the road to full JSpecify type-parameter nullability support would be very useful.\r\n\r\nNote: Setting this issue and linking it from some suppressions in our internal codebase, to make sure we remove those suppressions once support is implemented. In many of these cases, the subclassing of `Function` is done implicitly, through method references.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/660/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/660/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/653",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/653/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/653/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/653/events",
    "html_url": "https://github.com/uber/NullAway/issues/653",
    "id": 1368291276,
    "node_id": "I_kwDOBhZ_Pc5RjnfM",
    "number": 653,
    "title": "Document support for @NullMarked / @NullUnmarked once JSpecify 0.3.0 is out",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      },
      {
        "id": 4516826542,
        "node_id": "LA_kwDOBhZ_Pc8AAAABDTlNrg",
        "url": "https://api.github.com/repos/uber/NullAway/labels/documentation",
        "name": "documentation",
        "color": "c5def5",
        "default": true,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "lazaroclapp",
        "id": 999768,
        "node_id": "MDQ6VXNlcjk5OTc2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lazaroclapp",
        "html_url": "https://github.com/lazaroclapp",
        "followers_url": "https://api.github.com/users/lazaroclapp/followers",
        "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
        "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
        "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
        "repos_url": "https://api.github.com/users/lazaroclapp/repos",
        "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-09-09T20:28:33Z",
    "updated_at": "2022-09-09T20:28:34Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "NullAway after 0.10.0 has some support for both `@NullMarked` and `@NullUnmarked` (see JSpecify docs [here](https://jspecify.dev/docs/spec#the-declaration-annotation)).\r\n\r\nWe support both annotations on: package, class, and method scopes.\r\n\r\nHowever, two reasons keep us from updating the docs advertising this currently:\r\n\r\n- JSpecify 0.2.0 doesn't yet have `@NullUnmarked`, we are basically tracking JSpecify main/0.3.0 here and should wait for it to be released before finalizing anything about our support for these two annotations.\r\n- We don't support the annotation at a module level, because we still maintain JDK 8 compatibility. We might want to add that after #634 .",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/653/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/653/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/634",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/634/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/634/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/634/events",
    "html_url": "https://github.com/uber/NullAway/issues/634",
    "id": 1332194714,
    "node_id": "I_kwDOBhZ_Pc5PZ62a",
    "number": 634,
    "title": "Remove support for running on JDK / Java 8",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2621688971,
        "node_id": "MDU6TGFiZWwyNjIxNjg4OTcx",
        "url": "https://api.github.com/repos/uber/NullAway/labels/longterm",
        "name": "longterm",
        "color": "b60205",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-08-08T17:47:55Z",
    "updated_at": "2022-10-27T01:39:02Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Error Prone dropped support for Java 8 several months ago:\r\n\r\nhttps://github.com/google/error-prone/releases/tag/v2.11.0\r\n\r\nDropping Java 8 support will allow us to clean up several ugly hacks in the NullAway code and build configuration.  We'll aim to cut one final release supporting Java 8 before doing this.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/634/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/633",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/633/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/633/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/633/events",
    "html_url": "https://github.com/uber/NullAway/issues/633",
    "id": 1330813815,
    "node_id": "I_kwDOBhZ_Pc5PUpt3",
    "number": 633,
    "title": "Support JSR305 meta annotations TypeQualifierNickname and TypeQualifierDefault",
    "user": {
      "login": "keithl-stripe",
      "id": 79670223,
      "node_id": "MDQ6VXNlcjc5NjcwMjIz",
      "avatar_url": "https://avatars.githubusercontent.com/u/79670223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/keithl-stripe",
      "html_url": "https://github.com/keithl-stripe",
      "followers_url": "https://api.github.com/users/keithl-stripe/followers",
      "following_url": "https://api.github.com/users/keithl-stripe/following{/other_user}",
      "gists_url": "https://api.github.com/users/keithl-stripe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/keithl-stripe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/keithl-stripe/subscriptions",
      "organizations_url": "https://api.github.com/users/keithl-stripe/orgs",
      "repos_url": "https://api.github.com/users/keithl-stripe/repos",
      "events_url": "https://api.github.com/users/keithl-stripe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/keithl-stripe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2022-08-06T18:13:11Z",
    "updated_at": "2022-08-16T17:17:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm filing this as a follow-up to #628. (Note that fixing this will allow undoing the temporary workaround in #629)\r\n\r\nIf you read the bug at #628 (and https://github.com/google/guava/issues/6126), `@ParametricNullness` is not be doing anything novel or weird – it is just using `javax.annotation.meta` annotations which were specified as part of JSR 305 fifteen years ago in 2007. Unfortunately, unlike [IntelliJ](https://youtrack.jetbrains.com/issue/IDEA-65566/Allow-NotNull-as-the-default-element-behavior-for-a-given-class-or-package) and TCF, NullAway does not support these. \r\n\r\nThe ideal fix for #628 would be for NullAway to support [`TypeQualifierNickname`](https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/latest/javax/annotation/meta/TypeQualifierNickname.html) and [`TypeQualifierDefault`](https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/latest/javax/annotation/meta/TypeQualifierDefault.html). This would obviate the need for special cases to handle these Guava annotations.\r\n\r\nI would guess (not knowing much about NullAway architecture) it should not be a huge effort to implement this (though it may be hard to not degrade performance). Roughly: \r\n- Every time NullAway understands `@Nullable` (e.g. variable declarations, JSR308 annotated types):\r\n- For each other annotation present,\r\n  - if that annotation class itself is marked as `@TypeQualifierNickname`, interpret that class's annotations as being on the original AST element\r\n- For each parent AST node, check if it is marked with `@TypeQualifierDefault`, and interpret that node's annotations as being on the original AST element",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/633/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/619",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/619/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/619/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/619/events",
    "html_url": "https://github.com/uber/NullAway/issues/619",
    "id": 1295495482,
    "node_id": "I_kwDOBhZ_Pc5NN7E6",
    "number": 619,
    "title": "false-positive trigger on java17record.equals(null)",
    "user": {
      "login": "dmivankov",
      "id": 48548569,
      "node_id": "MDQ6VXNlcjQ4NTQ4NTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/48548569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmivankov",
      "html_url": "https://github.com/dmivankov",
      "followers_url": "https://api.github.com/users/dmivankov/followers",
      "following_url": "https://api.github.com/users/dmivankov/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmivankov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmivankov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmivankov/subscriptions",
      "organizations_url": "https://api.github.com/users/dmivankov/orgs",
      "repos_url": "https://api.github.com/users/dmivankov/repos",
      "events_url": "https://api.github.com/users/dmivankov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmivankov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604145,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDU=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true,
        "description": null
      },
      {
        "id": 4303421595,
        "node_id": "LA_kwDOBhZ_Pc8AAAABAIEAmw",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jdk17",
        "name": "jdk17",
        "color": "BEDC53",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2022-07-06T08:56:28Z",
    "updated_at": "2022-07-08T06:18:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "  - [X] If you think you found a bug, please include a code sample that reproduces the problem. A test case that reproduces the issue is preferred. A stack trace alone is ok but may not contain enough context for us to address the issue.\r\n\r\n```java\r\nclass A {\r\n    void test() {\r\n        record Foo() {};\r\n        new Foo().equals(null);\r\n    }\r\n}\r\n```\r\ntrips with\r\n>  error: [NullAway] passing @Nullable parameter 'null' where @NonNull is required\r\n    new Foo().equals(null);\r\n    \r\nBut equals to null on java17 records does work without producing NPE.\r\n\r\n  - [X] Please include the library version number, including the minor and patch version, in the issue text.\r\n0.9.8",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/619/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/612",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/612/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/612/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/612/events",
    "html_url": "https://github.com/uber/NullAway/issues/612",
    "id": 1275352750,
    "node_id": "I_kwDOBhZ_Pc5MBFau",
    "number": 612,
    "title": "Support org.apache.commons.lang3.ObjectUtils.firstNonNull",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 770404520,
        "node_id": "MDU6TGFiZWw3NzA0MDQ1MjA=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/lowpriority",
        "name": "lowpriority",
        "color": "a901bf",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-17T18:39:45Z",
    "updated_at": "2022-06-17T18:39:45Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Semantics of this method are fairly clear, it's `@Contract(\"!null -> !null)` for each element of its varargs. Is this something our library models already support? If not, we probably should.\r\n\r\ncc: @sonalmahajan \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/612/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/611",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/611/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/611/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/611/events",
    "html_url": "https://github.com/uber/NullAway/issues/611",
    "id": 1275267957,
    "node_id": "I_kwDOBhZ_Pc5MAwt1",
    "number": 611,
    "title": "Figure out why (Void)null produces a cast from @Nullable to @NonNull",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-17T16:55:36Z",
    "updated_at": "2022-06-17T16:55:36Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This shouldn't be the case, as `Void` values are nullable, but see #608 and the suppression at\r\n`NullAwayCFGBuilder.NullAwayCFGTranslationPhaseOne.scanWithVoid(...)`",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/611/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/604",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/604/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/604/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/604/events",
    "html_url": "https://github.com/uber/NullAway/issues/604",
    "id": 1245426415,
    "node_id": "I_kwDOBhZ_Pc5KO7Lv",
    "number": 604,
    "title": "Support field nullability information in stream closures for final fields",
    "user": {
      "login": "ketkarameya",
      "id": 94497232,
      "node_id": "U_kgDOBaHp0A",
      "avatar_url": "https://avatars.githubusercontent.com/u/94497232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ketkarameya",
      "html_url": "https://github.com/ketkarameya",
      "followers_url": "https://api.github.com/users/ketkarameya/followers",
      "following_url": "https://api.github.com/users/ketkarameya/following{/other_user}",
      "gists_url": "https://api.github.com/users/ketkarameya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ketkarameya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ketkarameya/subscriptions",
      "organizations_url": "https://api.github.com/users/ketkarameya/orgs",
      "repos_url": "https://api.github.com/users/ketkarameya/repos",
      "events_url": "https://api.github.com/users/ketkarameya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ketkarameya/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2022-05-23T16:25:19Z",
    "updated_at": "2022-08-08T21:30:11Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "NullAway throws an error `[NullAway] dereferenced expression allowedNames is @Nullable` at ` .filter(name -> allowedNames.contains(name))`.  I was not expecting this error because of the explicit null check for `allowedNames`.\r\n```\r\nimport java.util.stream.Collectors;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport javax.annotation.Nullable;\r\n\r\n class TestStream{\r\n\r\n    @Nullable private final Set<String> allowedNames;\r\n    TestStream(@Nullable Set<String> allowedNames) {\r\n      this.allowedNames = allowedNames;\r\n    }\r\n\r\n    private List<String> filterAllowedNames(List<String> inputNames){\r\n      if (allowedNames == null) {\r\n        return inputNames;\r\n      }\r\n      if (allowedNames.isEmpty()) {\r\n        return Collections.emptyList();\r\n      }\r\n      return inputNames\r\n              .stream()\r\n              .filter(name -> allowedNames.contains(name))\r\n              .collect(Collectors.toList());\r\n\r\n    }\r\n  }\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/604/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/597",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/597/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/597/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/597/events",
    "html_url": "https://github.com/uber/NullAway/issues/597",
    "id": 1228701906,
    "node_id": "I_kwDOBhZ_Pc5JPIDS",
    "number": 597,
    "title": "JSpecify-style treatment of Void (i.e. not special-casing it) requires generics support",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-05-07T19:12:18Z",
    "updated_at": "2022-05-07T19:12:18Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "We had to roll back the change in #586 . \r\n\r\nThe primary reason was to support the following pattern, in the absence of full support for nullability of generics:\r\n\r\nConsider first an interface like:\r\n\r\n```\r\ninterface Encoder<T> {\r\n   public T decode(String s)\r\n   public String encode(T o)\r\n}\r\n```\r\n\r\nWith multiple implementors for different types. In particular including:\r\n\r\n```\r\nclass VoidEncoder extends Encoder<Void> {\r\n   @Override \r\n   public Void decode(String s)\r\n   @Override \r\n   public String encode(Void v)\r\n}\r\n```\r\n\r\nHere, the interface is used generically mostly to produce a flow of the form `String s = encoder.encode(encoder.decode(...))` or `T t = encoder.decode(encoder.encode(...))` (with intermediate data movement between encoding and decoding). This is safe when only `VoidEncoder` is involved, since the end result `t` is `Void` and thus known to be `@Nullable` (technically: known to be `null`). This is also safe for any other instantiation of `T`, since the implementation must be using non-null values if `T` isn't `Void`.\r\n\r\nThis is **not** safe when casting `Void` to `Object` or otherwise eliding the generic:\r\n\r\n```\r\nEncoder enc = new VoidEncoder();\r\nObject o = enc.decode(\"...\");\r\no.toString(); // NPE!\r\n```\r\n\r\nBut it is uncommon to use the result of `.decode(...)` without knowing a more precise type than \"Object\" (and `Void` directly subtypes `Object`).\r\n\r\nThe right way to handle this is to support generics, which distinguishes between `Encoder<?>` which doesn't include `VoidEncoder` and `Encoder<? extends @Nullable Object>` which does.\r\n\r\nWithout generics support, not-special-casing `Void` is sound, but either incredibly noisy, since now every implementation of `Encoder<T>` must have a `@Nullable` returning `decode(...)` and `@Nullable` handling `encode(...)` just to allow for `VoidEncoder` as a subtype, or else we need `VoidEncoder` to sit outside the type hierarchy of the interface entirely.\r\n\r\nThis is a good argument for supporting generics, but, for now, the best solution for the sake of usability is to revert to our special casing of `Void` (see #595) and deal with the resulting unsoundness. ",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/597/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/594",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/594/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/594/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/594/events",
    "html_url": "https://github.com/uber/NullAway/issues/594",
    "id": 1224901433,
    "node_id": "I_kwDOBhZ_Pc5JAoM5",
    "number": 594,
    "title": "Allow multiple castToNonNull methods to be configured and castToNonNull methods with multiple arguments",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 770404520,
        "node_id": "MDU6TGFiZWw3NzA0MDQ1MjA=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/lowpriority",
        "name": "lowpriority",
        "color": "a901bf",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-05-04T04:08:13Z",
    "updated_at": "2022-05-04T04:08:13Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "A `castToNonNull` as defined in the docs is simply an identity function annotated as `@Nullable -> @NonNull`, with a NullAway suppression, used to cast values we know must be non-null at runtime, but which NullAway can't determine statically to be so.\r\n\r\nWe currently provide the option `-XepOpt:NullAway:CastToNonNullMethod=[...]` to register, by name (fully qualified class name, plus method simple name) a particular single canonical `castToNonNull` method for a given codebase. This method is assumed to take exactly one argument: the value being cast. This is used for multiple reasons:\r\n\r\n1. To detect and report an error when a statically known non-null value is passed as the argument to `castToNonNull`, to reduce the number of redundant casts and help make surface those casts that are actually needed.\r\n2. To suggests `castToNonNull` calls as fixes, including during `-XepPatchChecks:NullAway` runs (depending on configuration)\r\n3. Some code during initialization handles `castToNonNull` methods as a special case to detect safe field reads/uninitialized field escapes before initialization.\r\n\r\nUnfortunately, it's not unreasonable to want to have:\r\n\r\n- Multiple `castToNonNull` methods in use within a codebase (specially given the next point)\r\n- `castToNonNull` methods taking extra arguments beyond the value being cast. In particular: a logging or reporting class to which to write in the case of seeing a `null` value passed to the cast at runtime.\r\n- `castToNonNull` methods with the exact same simple name but different method signatures (a special case of the general combination of the two points above)\r\n\r\nSupporting such methods requires potentially changing the `:CastToNonNullMethod=` option, but, also, de-tangling the use cases above:\r\n\r\n-  (1) and (3) probably need to happen \"for every castToNonNull method\" and are fine with extra arguments, so long as it is known which argument is the value being cast (either always the first, or the `castToNonNull` method must be specified as full signature plus argument number, like our other library models)\r\n- (2) requires an uniquely distinguished `castToNonNull` method taking no arguments but the value being cast (or, equivalently, one for which all other arguments can be injected as statically known expressions, but then we can always just make a single argument wrapper and use that)\r\n\r\nAn option here is to rely on `-XepOpt:NullAway:CastToNonNullMethod=[...]`  exclusively for (2), and to have a separate mechanism to mark \"additional\" cast methods (`@CastToNonNullMethod`? Library Models?).\r\n\r\nThis is low priority, to be honest, but recording this as an issue because this is the second time I've had to rediscover this limitation 😅 ",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/594/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/578",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/578/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/578/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/578/events",
    "html_url": "https://github.com/uber/NullAway/issues/578",
    "id": 1146117137,
    "node_id": "I_kwDOBhZ_Pc5EUFwR",
    "number": 578,
    "title": "Google Java Format pre-commit hook only works on JDK 11",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-02-21T18:32:00Z",
    "updated_at": "2022-02-21T18:32:00Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Right now, our pre-commit hook to run GJF only works on JDK 11.  After #572 our version of GJF no longer runs on Java 8.  And, Google Java Format requires additional JVM arguments to run on JDK 17 (see https://github.com/sherter/google-java-format-gradle-plugin/issues/67).  Unfortunately, if we try to pass the JVM args required for JDK 17 in `gradle.properties`, builds start to fail on JDK 8 (see failed attempt in #577).  \r\n\r\nI think our best option may be to document this issue and recommend that anyone hacking on NullAway develop on JDK 11.  Once we drop support for JDK 8 we can add the relevant VM args to the config.  We could drop the pre-commit hook (which unfortunately can fail silently due to some of these GJF issues), but I'm hoping we can drop JDK 8 support in the near-ish term so we can avoid that step.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/578/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/574",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/574/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/574/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/574/events",
    "html_url": "https://github.com/uber/NullAway/issues/574",
    "id": 1140262302,
    "node_id": "I_kwDOBhZ_Pc5D9wWe",
    "number": 574,
    "title": "JSpecify and annotated packages option",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-02-16T16:14:07Z",
    "updated_at": "2022-02-16T16:14:07Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Once we land support for `@NullMarked`, it seems the AnnotatedPackages option would no longer be absolutely necessary.  If we end up adding a flag for \"JSpecify mode\", we could say that at least one of the JSpecify or AnnotatedPackages options should be given (and giving both would of course be supported).  We could instead just make AnnotatedPackages optional, but I'm concerned that could lead to confusion for users who are also not using `@NullMarked`.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/574/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/573",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/573/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/573/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/573/events",
    "html_url": "https://github.com/uber/NullAway/issues/573",
    "id": 1136483756,
    "node_id": "I_kwDOBhZ_Pc5DvV2s",
    "number": 573,
    "title": "JSpecify and restrictive annotations",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3223796397,
        "node_id": "MDU6TGFiZWwzMjIzNzk2Mzk3",
        "url": "https://api.github.com/repos/uber/NullAway/labels/jspecify",
        "name": "jspecify",
        "color": "5319e7",
        "default": false,
        "description": "Related to support for jspecify standard (see jspecify.dev)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-02-13T21:38:17Z",
    "updated_at": "2022-09-07T03:29:52Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "According to the JSpecify spec, a `@Nullable` annotation should be acknowledged even if it appears in unannotated (unmarked) code.  See [the spec](https://jspecify.dev/spec#augmented-type-of-a-type-usage-appearing-in-code) and also https://github.com/jspecify/jspecify/issues/235.  This treatment corresponds roughly to NullAway's [`AcknowledgeRestrictiveAnnotations` setting](https://github.com/uber/NullAway/wiki/Configuration#acknowledge-more-restrictive-annotations-from-third-party-jars), which is _off_ by default.  If we want to be compatible with the JSpecify spec on this point out of the box, we need to default `AcknowledgeRestrictiveAnnotations` to true.  But, this could lead to many unexpected (and possible undesirable?) new warnings after a NullAway upgrade.  Alternately, we could add a new flag (sigh) like `JSpecifyStrict`, and then have `JSpecifyStrict` imply `AcknowledgeRestrictiveAnnotations`.  We might need a new JSpecify-related flag anyway for handling of other features (like arrays).\r\n\r\n@lazaroclapp thoughts?\r\n\r\n(Side note: I think the current docs for `AcknowledgeRestrictiveAnnotations` are a bit wrong, in that `AcknowledgeRestrictiveAnnotations` impacts treatment of _any_ unannotated code, whether present as bytecode or source.)  ",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/573/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/570",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/570/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/570/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/570/events",
    "html_url": "https://github.com/uber/NullAway/issues/570",
    "id": 1130817177,
    "node_id": "I_kwDOBhZ_Pc5DZuaZ",
    "number": 570,
    "title": "Consider support of field nullability information in stream closures",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-02-10T19:54:48Z",
    "updated_at": "2022-02-10T23:03:48Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "The following code is very natural to write, with unexpected nullability implications:\r\n\r\n```\r\nimport java.util.stream.Stream;\r\nimport javax.annotation.Nullable;\r\n\r\npublic class Test {\r\n  @Nullable String prefix = null;\r\n  public void test(Stream<String> suffixes) {\r\n     if(prefix == null) {\r\n         this.prefix = \\\"Printing: \\\";\r\n     }\r\n     suffixes.forEach(s -> System.out.println(prefix.concat(s))); // null deref here\r\n  }\r\n}\r\n```\r\n\r\nIn the example above, the developer checks whether `prefix` is `null` (and sets it to a non-null value if so) before passing a lambda that dereferences it to a stream. However, because NullAway is strictly intra-procedural with respect to fields, it will not propagate the information about `prefix` being non-null within `Test.test` into the nullness store of the lambda being passed to `Stream.forEach(...)`.\r\n\r\nHandling this in the general case is not possible: when NullAway sees a lambda being passed around with a nullable field in its closure, it has no way to know when the lambda will be executed, and thus whether or not the state/value of that field will have changed between closure creation and the execution of the body of the lambda.\r\n\r\nAt the same time, the code above is very natural for developers to write and we do reason about inter-procedural nullability and lambda's in other cases involving streams (our usual `.filter(...).map(...)` handling, for example). I wonder if it might be worth it to special case some stream operations that we know execute eagerly and propagate field nullability information into them. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/570/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/570/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/561",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/561/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/561/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/561/events",
    "html_url": "https://github.com/uber/NullAway/issues/561",
    "id": 1111681153,
    "node_id": "I_kwDOBhZ_Pc5CQuiB",
    "number": 561,
    "title": "Support `@NonNull` annotation on local variables",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604147,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDc=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true,
        "description": null
      },
      {
        "id": 789995142,
        "node_id": "MDU6TGFiZWw3ODk5OTUxNDI=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "b7bbf7",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-01-22T20:36:09Z",
    "updated_at": "2022-04-06T21:51:56Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This would allow for more localized suppressions.  Say we have a method `foo(Object o)` in an annotated third-party library where `o` has no type annotation, but `o` really should be `@Nullable`, as `foo()` can handle being passed `null` as a parameter.  In code checked by NullAway, say you write:\r\n```java\r\nvoid bigMethod() {\r\n  ...\r\n  foo(null); // NullAway reports an error\r\n  ...\r\n}\r\n```\r\nI believe the only way to suppress the warning above currently is to write `@SuppressWarnings(\"NullAway\")` on `bigMethod`, which could suppress many other valid warnings.  If we supported checking `@NonNull` annotations on locals, then you could do a more localized suppression:\r\n```java\r\nvoid bigMethod() {\r\n  ...\r\n  // suppress since we know foo can handle null\r\n  @SuppressWarnings(\"NullAway\")\r\n  @NonNull Object p = null;\r\n  foo(p); \r\n  ...\r\n}\r\n```\r\nThis works because Java supports writing `@SuppressWarnings` on local variable declarations.  Additionally, it's just kind of weird that you currently don't get a warning from NullAway for writing `@NonNull Object p = null;` right now.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/561/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/548",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/548/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/548/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/548/events",
    "html_url": "https://github.com/uber/NullAway/issues/548",
    "id": 1101099968,
    "node_id": "I_kwDOBhZ_Pc5BoXPA",
    "number": 548,
    "title": "Test assertion that object is equal to a non-null object isn't recognised",
    "user": {
      "login": "hakanai",
      "id": 43236,
      "node_id": "MDQ6VXNlcjQzMjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/43236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hakanai",
      "html_url": "https://github.com/hakanai",
      "followers_url": "https://api.github.com/users/hakanai/followers",
      "following_url": "https://api.github.com/users/hakanai/following{/other_user}",
      "gists_url": "https://api.github.com/users/hakanai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hakanai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hakanai/subscriptions",
      "organizations_url": "https://api.github.com/users/hakanai/orgs",
      "repos_url": "https://api.github.com/users/hakanai/repos",
      "events_url": "https://api.github.com/users/hakanai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hakanai/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604147,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDc=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-01-13T02:53:35Z",
    "updated_at": "2022-01-14T20:08:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "If we have a test assertion that an object is equal to some other non-null object, NullAway doesn't treat this as if we had directly asserted that the object was non-null.\r\n\r\nWe're currently using NullAway v0.9.1.\r\n\r\nExample class:\r\n\r\n```java\r\nimport javax.annotation.Nullable;\r\npublic class A {\r\n    @Nullable\r\n    public String getThing() {\r\n        return \"ok\";\r\n    }\r\n}\r\n```\r\n\r\nExample test:\r\n\r\n```java\r\nimport org.junit.jupiter.api.Test;\r\nimport static org.hamcrest.MatcherAssert.*;\r\nimport static org.hamcrest.Matchers.*;\r\npublic class TestA {\r\n    @Test\r\n    public void testGetThing() {\r\n        String thing = new A().getThing();\r\n        String expected = \"ok\";\r\n\r\n        // This line implicitly shows that `thing` is not null\r\n        assertThat(thing, is(expected));\r\n\r\n        // Workaround is to uncomment this line\r\n        // assertThat(thing, is(notNullValue()));\r\n\r\n        assertThat(thing.length(), is(2));\r\n    }\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/548/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/540",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/540/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/540/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/540/events",
    "html_url": "https://github.com/uber/NullAway/issues/540",
    "id": 1094869285,
    "node_id": "I_kwDOBhZ_Pc5BQmEl",
    "number": 540,
    "title": "Disallow writing `@Initializer` on constructors",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 789995142,
        "node_id": "MDU6TGFiZWw3ODk5OTUxNDI=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "b7bbf7",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-01-06T01:00:48Z",
    "updated_at": "2022-04-21T21:25:53Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "If a constructor is annotated with `@Initializer`, NullAway currently treats the constructor as if it were an initializer method that runs after any constructor, which clearly doesn't make sense.  Instead, NullAway should report an error, as this is an invalid use of `@Initializer`.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/540/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/499",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/499/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/499/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/499/events",
    "html_url": "https://github.com/uber/NullAway/issues/499",
    "id": 980506902,
    "node_id": "MDU6SXNzdWU5ODA1MDY5MDI=",
    "number": 499,
    "title": "Switch from Coveralls to Codecov?",
    "user": {
      "login": "msridhar",
      "id": 193105,
      "node_id": "MDQ6VXNlcjE5MzEwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193105?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msridhar",
      "html_url": "https://github.com/msridhar",
      "followers_url": "https://api.github.com/users/msridhar/followers",
      "following_url": "https://api.github.com/users/msridhar/following{/other_user}",
      "gists_url": "https://api.github.com/users/msridhar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msridhar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msridhar/subscriptions",
      "organizations_url": "https://api.github.com/users/msridhar/orgs",
      "repos_url": "https://api.github.com/users/msridhar/repos",
      "events_url": "https://api.github.com/users/msridhar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msridhar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 770404520,
        "node_id": "MDU6TGFiZWw3NzA0MDQ1MjA=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/lowpriority",
        "name": "lowpriority",
        "color": "a901bf",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-08-26T18:00:42Z",
    "updated_at": "2021-12-24T17:21:13Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "I seem to recall we had an issue with Coveralls, GitHub Actions, and the coverage format generated by Jacoco (at least I think that was an issue :-) ).  If we want something more Actions-compliant maybe we could try Codecov?\r\n\r\nhttps://about.codecov.io\r\n\r\nJust jotting down so I don't forgot, not high priority",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/499/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/482",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/482/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/482/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/482/events",
    "html_url": "https://github.com/uber/NullAway/issues/482",
    "id": 901502117,
    "node_id": "MDU6SXNzdWU5MDE1MDIxMTc=",
    "number": 482,
    "title": "Better documentation and tests for initializer support",
    "user": {
      "login": "xenoterracide",
      "id": 5517,
      "node_id": "MDQ6VXNlcjU1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xenoterracide",
      "html_url": "https://github.com/xenoterracide",
      "followers_url": "https://api.github.com/users/xenoterracide/followers",
      "following_url": "https://api.github.com/users/xenoterracide/following{/other_user}",
      "gists_url": "https://api.github.com/users/xenoterracide/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xenoterracide/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xenoterracide/subscriptions",
      "organizations_url": "https://api.github.com/users/xenoterracide/orgs",
      "repos_url": "https://api.github.com/users/xenoterracide/repos",
      "events_url": "https://api.github.com/users/xenoterracide/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xenoterracide/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2021-05-25T23:24:21Z",
    "updated_at": "2021-05-26T20:42:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "not sure how to fix this\r\n```\r\n> Task :cli:config:compileJava FAILED\r\n/home/xeno/IdeaProjects/brix/modules/cli/config/src/main/java/com/xenoterracide/cli/config/CliCommand.java:32: error: [NullAway] initializer method does not guarantee @NonNull fields language (line 22), moduleType (line 24), project (line 26) are initialized along all control-flow paths (remember to check for exceptions or early returns).\r\n  CliCommand( Dispatcher dispatcher ) {\r\n  ^\r\n    (see http://t.uber.com/nullaway )\r\n1 error\r\n```\r\n\r\nI've tried adding this via the ep plugin\r\n\r\n```\r\n    option(\"NullAway:AnnotatedPackages\", \"com.xenoterracide\")\r\n    option(\"NullAway:ExternalInitAnnotations\", \"picocli.CommandLine.Option\")\r\n    option(\"NullAway:CustomInitializerAnnotations\", \"picocli.CommandLine.Option\")\r\n```\r\n\r\n```java\r\npackage com.xenoterracide.cli.config;\r\n\r\nimport com.xenoterracide.brix.cli.api.CliConfiguration;\r\nimport com.xenoterracide.brix.dispatch.Dispatcher;\r\nimport org.apache.commons.lang3.builder.ToStringBuilder;\r\nimport org.apache.commons.lang3.builder.ToStringStyle;\r\nimport org.checkerframework.checker.nullness.qual.MonotonicNonNull;\r\nimport org.springframework.stereotype.Component;\r\nimport picocli.CommandLine;\r\n\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Optional;\r\n\r\n@Component\r\npublic class CliCommand implements CliConfiguration, Runnable {\r\n\r\n  private final Dispatcher dispatcher;\r\n\r\n  private Path workdir = Paths.get( \"\" );\r\n\r\n  private String language;\r\n\r\n  private String moduleType;\r\n\r\n  private String project;\r\n\r\n  private @MonotonicNonNull String name;\r\n\r\n  private @MonotonicNonNull Path repo;\r\n\r\n  CliCommand( Dispatcher dispatcher ) {\r\n    this.dispatcher = dispatcher;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ToStringBuilder.reflectionToString( this, ToStringStyle.MULTI_LINE_STYLE );\r\n  }\r\n\r\n  @Override\r\n  public Optional<Path> getRepo() {\r\n    return Optional.ofNullable( repo );\r\n  }\r\n\r\n  @CommandLine.Option(\r\n    names = {\"--repo\"},\r\n    description = \"Repository path from the current working directory. \" +\r\n      \"Templates and configs are looked up relative to here. If the config \" +\r\n      \"isn't found here, then we will search ~/.config/brix\"\r\n  )\r\n  public void setRepo( Path repo ) {\r\n    this.repo = repo;\r\n  }\r\n\r\n  @Override\r\n  public Path getWorkdir() {\r\n    return workdir;\r\n  }\r\n\r\n  @CommandLine.Option(\r\n    names = {\"--workdir\"},\r\n    defaultValue = \"\",\r\n    showDefaultValue = CommandLine.Help.Visibility.ALWAYS,\r\n    description = \"The working directory you want your destination paths to be relative to.\" +\r\n      \" Defaults to current working directory\"\r\n  )\r\n  public void setWorkdir( Path workdir ) {\r\n    this.workdir = workdir;\r\n  }\r\n\r\n  @Override\r\n  public String getProject() {\r\n    return project;\r\n  }\r\n\r\n  @CommandLine.Parameters(\r\n    index = \"2\",\r\n    description = \"The name of the project you're generating code for.\"\r\n  )\r\n  public void setProject( String project ) {\r\n    this.project = project;\r\n  }\r\n\r\n  @Override\r\n  public String getLanguage() {\r\n    return language;\r\n  }\r\n\r\n  @Override\r\n  public String getModuleType() {\r\n    return moduleType;\r\n  }\r\n\r\n  @CommandLine.Parameters(\r\n    index = \"1\",\r\n    description = \"The type of code you're generating e.g controller, also the name of the config\" +\r\n      \" file without the extension.\"\r\n  )\r\n  public void setModuleType( String moduleType ) {\r\n    this.moduleType = moduleType;\r\n  }\r\n\r\n  @Override\r\n  public @MonotonicNonNull String getName() {\r\n    return name;\r\n  }\r\n\r\n  @CommandLine.Parameters(\r\n    index = \"3\",\r\n    description = \"The name of the module to be created within the project.\",\r\n    arity = \"0\"\r\n  )\r\n  public void setName( String name ) {\r\n    this.name = name;\r\n  }\r\n\r\n  @CommandLine.Parameters(\r\n    index = \"0\",\r\n    description = \"The programming language you're generating code for. Directory under --dir\"\r\n  )\r\n  public void setLanguage( String language ) {\r\n    this.language = language;\r\n  }\r\n\r\n  @Override\r\n  public void run() {\r\n    dispatcher.run();\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/482/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/467",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/467/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/467/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/467/events",
    "html_url": "https://github.com/uber/NullAway/pull/467",
    "id": 871233003,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjI2Mjg1Nzg0",
    "number": 467,
    "title": "fix non android gradle instructions",
    "user": {
      "login": "xenoterracide",
      "id": 5517,
      "node_id": "MDQ6VXNlcjU1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xenoterracide",
      "html_url": "https://github.com/xenoterracide",
      "followers_url": "https://api.github.com/users/xenoterracide/followers",
      "following_url": "https://api.github.com/users/xenoterracide/following{/other_user}",
      "gists_url": "https://api.github.com/users/xenoterracide/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xenoterracide/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xenoterracide/subscriptions",
      "organizations_url": "https://api.github.com/users/xenoterracide/orgs",
      "repos_url": "https://api.github.com/users/xenoterracide/repos",
      "events_url": "https://api.github.com/users/xenoterracide/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xenoterracide/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-04-29T16:44:10Z",
    "updated_at": "2021-06-03T00:58:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/uber/NullAway/pulls/467",
      "html_url": "https://github.com/uber/NullAway/pull/467",
      "diff_url": "https://github.com/uber/NullAway/pull/467.diff",
      "patch_url": "https://github.com/uber/NullAway/pull/467.patch",
      "merged_at": null
    },
    "body": "resolves #466",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/467/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/466",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/466/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/466/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/466/events",
    "html_url": "https://github.com/uber/NullAway/issues/466",
    "id": 871224479,
    "node_id": "MDU6SXNzdWU4NzEyMjQ0Nzk=",
    "number": 466,
    "title": "Instructions for plain gradle incorrect",
    "user": {
      "login": "xenoterracide",
      "id": 5517,
      "node_id": "MDQ6VXNlcjU1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xenoterracide",
      "html_url": "https://github.com/xenoterracide",
      "followers_url": "https://api.github.com/users/xenoterracide/followers",
      "following_url": "https://api.github.com/users/xenoterracide/following{/other_user}",
      "gists_url": "https://api.github.com/users/xenoterracide/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xenoterracide/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xenoterracide/subscriptions",
      "organizations_url": "https://api.github.com/users/xenoterracide/orgs",
      "repos_url": "https://api.github.com/users/xenoterracide/repos",
      "events_url": "https://api.github.com/users/xenoterracide/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xenoterracide/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-04-29T16:34:51Z",
    "updated_at": "2021-05-25T20:32:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "plain gradle instructions are incorrect, they lead to this\r\n\r\ngiven\r\n\r\n```kt\r\nplugins {\r\n  `java-library`\r\n  `java-test-fixtures`\r\n  id(\"brix.bom\")\r\n  id(\"net.ltgt.errorprone\")\r\n  id(\"org.checkerframework\")\r\n}\r\n\r\ndependencies {\r\n  errorprone(\"com.google.errorprone:error_prone_core:2.+\")\r\n  annotationProcessor(\"com.uber.nullaway:nullaway:0.8.+\")\r\n  checkerFramework(checker.processor)\r\n  compileOnly(checker.annotations)\r\n  testFixturesCompileOnly(checker.annotations)\r\n}\r\n\r\ntasks.withType<JavaCompile>().configureEach {\r\n  options.compilerArgs.addAll(\r\n    listOf(\r\n      \"-parameters\",\r\n      \"-Xlint:deprecation\",\r\n      \"-Xlint:unchecked\"\r\n    )\r\n  )\r\n  options.errorprone {\r\n    disableWarningsInGeneratedCode.set(true)\r\n    excludedPaths.set(\".*/build/generated/sources/annotationProcessor/.*\")\r\n    option(\"NullAway:AnnotatedPackages\", \"com.xenoterracide\")\r\n    val errors = mutableListOf(\r\n    errors.add(\"NullAway\")\r\n    error(*errors.toTypedArray())\r\n    ...\r\n```\r\n\r\nI get this error\r\n\r\n```\r\n> Task :util:compileTestFixturesJava FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':util:compileTestFixturesJava'.\r\n> NullAway is not a valid checker name\r\n\r\n* Try:\r\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r\n\r\n* Get more help at https://help.gradle.org\r\n\r\nBUILD FAILED in 5s\r\n7 actionable tasks: 7 executed\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/466/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/453",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/453/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/453/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/453/events",
    "html_url": "https://github.com/uber/NullAway/issues/453",
    "id": 819656195,
    "node_id": "MDU6SXNzdWU4MTk2NTYxOTU=",
    "number": 453,
    "title": "AnnotatedPackages w/ com.google.common not working due to Preconditions.checkNotNull",
    "user": {
      "login": "rwinograd",
      "id": 3784701,
      "node_id": "MDQ6VXNlcjM3ODQ3MDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3784701?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rwinograd",
      "html_url": "https://github.com/rwinograd",
      "followers_url": "https://api.github.com/users/rwinograd/followers",
      "following_url": "https://api.github.com/users/rwinograd/following{/other_user}",
      "gists_url": "https://api.github.com/users/rwinograd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rwinograd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rwinograd/subscriptions",
      "organizations_url": "https://api.github.com/users/rwinograd/orgs",
      "repos_url": "https://api.github.com/users/rwinograd/repos",
      "events_url": "https://api.github.com/users/rwinograd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rwinograd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-03-02T05:48:24Z",
    "updated_at": "2022-09-01T17:47:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm using **Nullaway 0.9.0** using the **Bazel build system**. We have a small library that is using google guava and are trying to treat the Guava library as if it is correctly annotated with Nullable annotations. Our problem is that when we add `com.google.common` to our list of annotatedPackages, the build starts failing because it says that `Preconditions.checkNotNull` rejects a Nullable field.\r\n\r\nThe reason we're trying to do this in our real application is because we have some fields where a null value indicates a coding mistake and cannot easily restructure the code to avoid this pattern. Sample code:\r\n\r\nBUILD.bazel\r\n```bazel\r\njava_library(\r\n    name = \"mypackage\",\r\n    srcs = glob(\r\n        [\"*.java\"],\r\n    ),\r\n    javacopts = [\r\n        \"-XepOpt:NullAway:AnnotatedPackages=com.mypackage,com.google.common\",\r\n    ],\r\n    plugins = [\r\n        \"//third_party:nullaway\",\r\n    ],\r\n    visibility = [\r\n    ],\r\n    deps = [\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/code/findbugs:jsr305\",\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/guava\",\r\n    ],\r\n)\r\n```\r\n\r\ncom.mypackage.SomeClass\r\n```java\r\npackage com.mypackage;\r\n\r\nimport com.google.common.base.Preconditions;\r\nimport com.google.common.collect.ImmutableList;\r\nimport javax.annotation.Nullable;\r\n\r\npublic class SomeClass {\r\n\r\n  public ImmutableList<String> someMethod(@Nullable String nullable) {\r\n    return ImmutableList.of(Preconditions.checkNotNull(nullable));\r\n  }\r\n}\r\n```\r\n\r\n### Expected:\r\nMy understanding is that this code should pass because `Preconditions.checkNotNull` is marked as a special method that accepts a nullable field, but ensures that the returned value is no-null because it fails if it is null. This is from reading the [javadoc of the `LibraryModels#failIfNullParameters` interface](https://github.com/uber/NullAway/blob/29f7141edb6c8ca4b8e0c12c358700e7a9577585/nullaway/src/main/java/com/uber/nullaway/LibraryModels.java#L65) (_Note that description is actually on the nonNullParameters method_). The code indicates [that Preconditions is marked as FAIL_IF_NULL_PARAMETERS](https://github.com/uber/NullAway/blob/998ba05d7a115464ed1acc1c9a34430516de5b9d/nullaway/src/main/java/com/uber/nullaway/handlers/LibraryModelsHandler.java#L230). This [appears to be wired in as the default](https://github.com/uber/NullAway/blob/998ba05d7a115464ed1acc1c9a34430516de5b9d/nullaway/src/main/java/com/uber/nullaway/handlers/LibraryModelsHandler.java#L224), and I believe that [the documentation](https://github.com/uber/NullAway/wiki/Configuration#other-build-systems) indicates that this should always take precedence:\r\n> Also, specific method annotations can always be overridden by explicit Library Models, which take precedence over both the optimistic defaults and any annotations in the code, whether marked as annotated or unannotated.\r\n\r\n### Actual behaviour:\r\n```\r\nFrom Building src/main/java/com/mypackage/libmypackage.jar (1 source file):\r\nsrc/main/java/com/mypackage/SomeClass.java:10: warning: [NullAway] passing @Nullable parameter 'nullable' where @NonNull is required\r\n    return ImmutableList.of(Preconditions.checkNotNull(nullable));\r\n                                                       ^\r\n    (see http://t.uber.com/nullaway )\r\n```\r\n\r\nOur workaround right now would be to include guava in the AnnotatedPackages classpath but treat Preconditions as an unannotated class\r\n```\r\n    javacopts = [\r\n        \"-XepOpt:NullAway:AnnotatedPackages=com.mypackage,com.google.common\",\r\n        \"-XepOpt:NullAway:UnannotatedClasses=com.google.common.base.Preconditions\",\r\n    ],\r\n```\r\n\r\nThis approach the build works as expected, however, from the documentation this doesn't appear to be the expected integration path. Is this a bug where the override behaviour is not working or am I misreading the documentation?\r\n\r\n----\r\nWe ran through some extra tests just to see what would happen.\r\n\r\n### Test case 1: Do not include guava in the AnnotatedPackages classpath\r\n\r\n```bazel\r\njava_library(\r\n    name = \"mypackage\",\r\n    srcs = glob(\r\n        [\"*.java\"],\r\n    ),\r\n    javacopts = [\r\n        \"-XepOpt:NullAway:AnnotatedPackages=com.mypackage\",\r\n    ],\r\n    plugins = [\r\n        \"//third_party:nullaway\",\r\n    ],\r\n    visibility = [\r\n    ],\r\n    deps = [\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/code/findbugs:jsr305\",\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/guava\",\r\n    ],\r\n)\r\n```\r\n\r\n```java\r\npackage com.mypackage;\r\n\r\nimport com.google.common.collect.ImmutableList;\r\nimport javax.annotation.Nullable;\r\n\r\npublic class SomeClass {\r\n\r\n  public ImmutableList<String> someMethod(@Nullable String nullable) {\r\n    return ImmutableList.of(nullable);\r\n  }\r\n}\r\n```\r\n\r\nAs expected, errorprone did not error out and NullAway because it will not treat ImmutableList's argument as a nullable parameter.\r\n\r\n### Test case 2: Include guava in the AnnotatedPackages classpath but don't use Preconditions\r\n\r\n```bazel\r\njava_library(\r\n    name = \"mypackage\",\r\n    srcs = glob(\r\n        [\"*.java\"],\r\n    ),\r\n    javacopts = [\r\n        \"-XepOpt:NullAway:AnnotatedPackages=com.mypackage,com.google.base\",\r\n    ],\r\n    plugins = [\r\n        \"//third_party:nullaway\",\r\n    ],\r\n    visibility = [\r\n    ],\r\n    deps = [\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/code/findbugs:jsr305\",\r\n        \"@third_party_jvm//3rdparty/jvm/com/google/guava\",\r\n    ],\r\n)\r\n```\r\n\r\n```java\r\npublic class SomeClass {\r\n\r\n  public ImmutableList<String> someMethod(@Nullable String nullable) {\r\n    return ImmutableList.of(nullable);\r\n  }\r\n}\r\n```\r\n\r\nAs expected, errorprone failed with the following message. \r\n```\r\nINFO: From Building src/main/java/com/mypackage/libmypackage.jar (1 source file):\r\nsrc/main/java/com/mypackage/SomeClass.java:9: warning: [NullAway] passing @Nullable parameter 'nullable' where @NonNull is required\r\n    return ImmutableList.of(nullable);\r\n                            ^\r\n    (see http://t.uber.com/nullaway )\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/453/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/444",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/444/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/444/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/444/events",
    "html_url": "https://github.com/uber/NullAway/issues/444",
    "id": 810523254,
    "node_id": "MDU6SXNzdWU4MTA1MjMyNTQ=",
    "number": 444,
    "title": "Handling interactions between casts and our map handling in dataflow",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604145,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDU=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true,
        "description": null
      },
      {
        "id": 770404520,
        "node_id": "MDU6TGFiZWw3NzA0MDQ1MjA=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/lowpriority",
        "name": "lowpriority",
        "color": "a901bf",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-02-17T20:42:50Z",
    "updated_at": "2021-02-17T20:43:24Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "The following null check is both correct and fully understood by NullAway:\r\n\r\n```\r\npublic void foo(HashMap valueMap) {\r\n    String message =  valueMap.get(\"message\") == null ? \"\" : (String) valueMap.get(\"message\");\r\n    expectsNonNull(message);  // NullAway knows message is @NonNull here\r\n}\r\n```\r\n\r\nHowever, it's fairly natural - albeit unnecessary - for developers to also add a cast on the check side of the ternary operator:\r\n\r\n```\r\npublic void foo(HashMap valueMap) {\r\n    String message =  (String) valueMap.get(\"message\") == null ? \"\" : (String) valueMap.get(\"message\");\r\n   // warning: [NullAway] passing @Nullable parameter 'message' where @NonNull is required\r\n    expectsNonNull(message);  \r\n}\r\n```\r\n\r\nThis breaks our handling of maps, resulting in the \"passing @Nullable parameter\" error above.\r\n\r\nThe underlying reason likely has to be with the fact that `(String) valueMap.get(\"message\")` is being compared to `null`, not `valueMap.get(\"message\")`, and thus we never learn the nullability of that access path as far as our dataflow algorithm is concerned.\r\n\r\nNote: `(String) valueMap.get(\"message\") == null` is parsed as `((String) valueMap.get(\"message\")) == null`.\r\n\r\nThis is probably fairly low priority to handle, but might be worth fixing if it's easy enough.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/444/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/438",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/438/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/438/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/438/events",
    "html_url": "https://github.com/uber/NullAway/issues/438",
    "id": 776673997,
    "node_id": "MDU6SXNzdWU3NzY2NzM5OTc=",
    "number": 438,
    "title": "Suggestion: Accept a `Nullable` annotation name and suggest it in cases where it's missing",
    "user": {
      "login": "ZacSweers",
      "id": 1361086,
      "node_id": "MDQ6VXNlcjEzNjEwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1361086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZacSweers",
      "html_url": "https://github.com/ZacSweers",
      "followers_url": "https://api.github.com/users/ZacSweers/followers",
      "following_url": "https://api.github.com/users/ZacSweers/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZacSweers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZacSweers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZacSweers/subscriptions",
      "organizations_url": "https://api.github.com/users/ZacSweers/orgs",
      "repos_url": "https://api.github.com/users/ZacSweers/repos",
      "events_url": "https://api.github.com/users/ZacSweers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZacSweers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 681604147,
        "node_id": "MDU6TGFiZWw2ODE2MDQxNDc=",
        "url": "https://api.github.com/repos/uber/NullAway/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true,
        "description": null
      },
      {
        "id": 2621688971,
        "node_id": "MDU6TGFiZWwyNjIxNjg4OTcx",
        "url": "https://api.github.com/repos/uber/NullAway/labels/longterm",
        "name": "longterm",
        "color": "b60205",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-30T23:18:31Z",
    "updated_at": "2020-12-30T23:53:15Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Error-prone itself has some checks for this, but nullaway is obviously better at it.\r\n\r\nGiven an error like this\r\n\r\n```\r\n/Users/zsweers/dev/slack/restructure/slack-android-ng/libraries/foundation/slack-commons/src/main/java/slack/commons/logger/DebugLogger.java:62: error: [NullAway] parameter tag is @NonNull, but parameter in superclass method slack.commons.logger.Logger.log(java.lang.String,java.lang.String,java.lang.Throwable) is @Nullable\r\n  public void log(final String tag, final String message, final Throwable throwable) {\r\n                               ^\r\n    (see http://t.uber.com/nullaway )\r\n\r\n```\r\n\r\nI'd like to be able to define my desired `@Nullable` annotation as an option and have nullaway suggest adding the annotation.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/438/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/432",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/432/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/432/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/432/events",
    "html_url": "https://github.com/uber/NullAway/issues/432",
    "id": 759808883,
    "node_id": "MDU6SXNzdWU3NTk4MDg4ODM=",
    "number": 432,
    "title": "Create a Maven artifact for annotations (e.g. @EnsuresNonnull/@RequiresNonnull)",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-08T21:50:41Z",
    "updated_at": "2020-12-08T21:50:58Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "See #423 \r\n\r\nPotentially worth including a default castToNonNull(...)\r\n\r\n`unsafeCastToNonNull(...)` ?",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/432/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/uber/NullAway/issues/431",
    "repository_url": "https://api.github.com/repos/uber/NullAway",
    "labels_url": "https://api.github.com/repos/uber/NullAway/issues/431/labels{/name}",
    "comments_url": "https://api.github.com/repos/uber/NullAway/issues/431/comments",
    "events_url": "https://api.github.com/repos/uber/NullAway/issues/431/events",
    "html_url": "https://github.com/uber/NullAway/issues/431",
    "id": 759808185,
    "node_id": "MDU6SXNzdWU3NTk4MDgxODU=",
    "number": 431,
    "title": "Support static fields in @EnsuresNonnull/@RequiresNonnull annotations",
    "user": {
      "login": "lazaroclapp",
      "id": 999768,
      "node_id": "MDQ6VXNlcjk5OTc2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lazaroclapp",
      "html_url": "https://github.com/lazaroclapp",
      "followers_url": "https://api.github.com/users/lazaroclapp/followers",
      "following_url": "https://api.github.com/users/lazaroclapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/lazaroclapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lazaroclapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lazaroclapp/subscriptions",
      "organizations_url": "https://api.github.com/users/lazaroclapp/orgs",
      "repos_url": "https://api.github.com/users/lazaroclapp/repos",
      "events_url": "https://api.github.com/users/lazaroclapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lazaroclapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-08T21:49:33Z",
    "updated_at": "2020-12-08T21:49:33Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Follow up for #423, which punts when the field is not an instance field.",
    "reactions": {
      "url": "https://api.github.com/repos/uber/NullAway/issues/431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/uber/NullAway/issues/431/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
